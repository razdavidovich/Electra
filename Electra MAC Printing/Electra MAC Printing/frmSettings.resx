<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        8wRcjtgtP3zcbz173MQqcN7vIWvg/yFr4f8ha+H/I2vg/0eC4Ki70vURmLrvAJ276QD///8DV43hjChv
        4P8hauL/IWvh/yFr4f8ha+H/IWvh/yFr4f8jbOH/MHTi/yhv4v8ha+H/IWvi/yJr4P8rcN/3PHvfxlyR
        42yDre0q2+XvBxZfzgAABLoAoL3jFGaW4lFKheDFLnPf6SVt4PsgauD/NHXc5X6l4jBtm+AAjLPnAMPZ
        7wlIg92nI2vg/yFr4f8ha+H/IWvh/yFr4f8ha+H/IGrh/zBz3/9unOOsXJLnjj184c4scOH0JW3h/yFr
        4P8ia+D/LHLh+jp849xQieGmcqHmUMLW8Q7///8BAACeAKfD6Rd4pek1U4nffDd43dE7e93tg63oXUqG
        3QCMtusAo8bvGFGK4dcia+D/IWvh/yFr4f8ha+H/IWvh/yFr4f8gauH/NXbf/3Ob2F4AAIYAibDrJmaY
        51RMheGlMHTf7CVt4fohbOL/IGrh/yVt4P8vdN/nPn3frVqP44OLs+0s////AiVs2wD///8CeqTjKXak
        5lSkxvA9T43gAIy27ACix+8YT4ri2CJr4P8ha+L/IWvh/yFr4f8ha+H/IWvh/yBr4f8rcN//VIjbjp26
        5hQATNIAKW3bALfO7g1gkt9ER4TibDl74MUpb9/6IWrg/x9r4f8ha+D/KXDg/zl749hCgOOTX5LjS6W+
        5A4kaNUAVYzgAEiI3QCxy/AAi7PpAL7X8ApHgt+oI2vg/yJr4f8ha+H/IWvh/yFr4f8ha+H/IWvh/yFr
        4f8mbN/1Nnffuzl63m1ileQ1q8fwCUuD3QAACMsAfqnoIEeB3V80dt6dLXHd5CNr4P8gauH/IGrh/yNs
        4f8rcN/xN3jfrDt53F5unOQtqsXnBJm65wCSsuUA///yBFCH35YmbeD/IWvh/yFr4f8ha+H/IWvh/yFr
        4f8ha+H/IWvh/yFq4v8ha+L/JGzh/TF03+VEgN+gaJfkP63K9gwALM0ARoDdAP/98wZplt4xQ37elDJ1
        3+UmbuD7I2zh/yBq4f8ga+H/JW7g+jx629J8pd8tc5/eAMPY9QAAKMcAcaDmYjF13/kga+H/IWvh/yFr
        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
        AADgAAAA8AAAAPgAAAD/AADg/+AH//////8=
</value>
  </data>
</root>